#!/bin/sh

# LIMEBAR
# Simon Hugh Moore
#
# Set config options for lemonbar

# Kill any running lemonbar
# pgrep -x lemonbar > /dev/null && pkill -x lemonbar &

font="SourceCodeProSemiBold-13"
icon_font="FontAwesome-13"
geometry="x28"
offset="-2"
clickable_areas=25  # Number of clickable areas.
f_color="#ff3300"
b_color="#000000"

prefix=${XDG_RUNTIME_DIR}/melonbar
pipe=$prefix/melonbar_pipe

_cleanup() {
    rm -f $pipe
    exit
}

_update_pipe() {
    if [ -p $pipe ]; then
        echo "$1" > $pipe
    else
        echo "FIFO pipe missing, first execute '$( basename $0 ) run'."
    fi
}


# Update the contents of statusline and refresh.
_update(){
    case "$1" in
        desktops) statusline update desktops "$2" ;;
        window) statusline update window-count & statusline update window-title ;;
        volume) statusline update volume "$2" ;;
        keystate) statusline update keystate ;;
        record) statusline update record "$2" ;;
        loop) statusline update system ;;
        all) statusline update all;;
    esac

    # refresh statusline.
    _update_pipe "$( statusline )"
}


_run(){
    # Create pipe if it doesn't exist and
    #  remove it when exit.
    # If pipe does exist, exit.
    mkdir -p $prefix
    if { mkfifo $pipe 2>/dev/null; }; then
        trap _cleanup INT TERM EXIT
    else
        echo "$(basename $0) is already running, exiting..."
        exit 1
    fi

        

    # pass contents of pipe into lemonbar
    tail -f "$pipe" | lemonbar -p -a "${clickable_areas}" -f "${font}" -f "${icon_font}" -f "Font Awesome" -o "${offset}" -g "${geometry}" -B "${b_color}" -F "${f_color}" | dash &

    # update statusline once for initialization.
    _update all

    # updates every time desktop/monitor changes.
    # see 'man bspc' for 'subscribe'
    bspc subscribe report | while read -r line; do
        # pass report to statusline for formatting.
        _update desktops "$line"
        _update window
    done &

    # updates every time window focus changes.
    bspc subscribe node_focus | while read -r line; do
        _update window
    done &

    # A hack to fix 'subscribe report' not updating when desktop gets occupied. 
    bspc subscribe node_add | while read -r line; do
        bspc desktop --focus focused
    done &

    # updates everytime volume is changed.
    volume subscribe | while read -r line; do
        _update volume "$line"
    done &
    volume update # Make sure volume is updated once to fill subscribe loop.

    # updates every time record is run.
    record subscribe | while read -r line; do
        [ "$line" = "Start Recording" ] && _update record "$line"
        [ "$line" = "End Recording" ] && _update record "$line"
    done &

    while read -r line; do
       [ "$line" = "KILL" ] && _cleanup
       [ "$line" = "KILL" ] && echo "lol"
       echo "$line"
    done < "$pipe"

    # update pipe in an infinite loop that iterates every
    # 30 seconds
    while :; do
        _update loop
        sleep 30
    done
}

_kill() { echo "KILL" > "$pipe"; }


case $1 in
    run) _run ;;
    update) shift; _update $@;;
    -k|kill) _kill ;;
    *) _update ;;
esac
