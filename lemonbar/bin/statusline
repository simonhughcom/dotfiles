#!/bin/bash

delim="%{F#b0b0b0}|%{F-}"

_keystate() {
    f_color="e82e1e"

    lockline=$(xset -q | grep "Num Lock")

    caplock=$(echo "$lockline" | awk '{print $4}')
    numlock=$(echo "$lockline" | awk '{print $8}')
    scrolllock=$(echo "$lockline" | awk '{print $12}')

    message=""

    [ "$caplock" = "on" ] && message="%{F#$f_color}CAPLOCK $delim"
    [ "$numlock" = "on" ] && message="$message %{F#$f_color}NUMLOCK $delim"
    [ "$scrolllock" = "on" ] && message="$message %{F#$f_color}SCROLLLOCK $delim"

    echo "$message%{F-}"
}

_memory() {
    f_color="C0C000"

    echo "%{F#$f_color} $(free -h | awk '/Mem:/ {print $3}')%{F-}"
}

_volume() {
    f_color="98C379"

	[ "$(pulsemixer --get-mute)" = "1" ] && printf "\\n" && return 0

	vol=$(pulsemixer --get-volume | awk '{print $1}')

	if [ "$vol" -gt "100" ]; then
		icon=""
	elif [ "$vol" -lt "50" ]; then
		icon=""
	else
		icon=""
	fi

	printf "%%{F#$f_color}%s %s%%\n%%{F-}" "$icon" "$vol"
}

_update() {
    f_color="b29f27"

    updatenr=$(pacman -Qu | grep -v "\[ignored\]" | wc -l)
    [ "$updatenr" != "0" ] && printf "$delim %{F#$f_color} 📦 $updatenr%{F-}"
}

_record() {
    f_color="e82e1e"

	recpid_file="$XDG_RUNTIME_DIR/recordingpid"
	[ -e "$recpid_file" ] && echo "%{F#$f_color}⏺ rec $delim%{F-}"
}

_battery() {
    # Don't run if acpi not available
    command -v acpi > /dev/null 2>&1 || exit 1
    f_color="#70bb70"

    bat=""
    while read line; do
        tmp="$(echo "$line" | awk '{print $4}' | sed 's/,//;s/%//')"
        
        if [ "$tmp" -gt "75" ]; then
            icon=""
        elif [ "$tmp" -gt "50" ]; then
            icon=""
        elif [ "$tmp" -gt "20" ]; then
            icon=""
            f_color="#999900"
        elif [ "$tmp" -lt "5" ]; then
            icon=""
            f_color="#aa2222"
        else
            icon=""
            f_color="#aa2222"
        fi

        bat="$bat %{F$f_color}$icon $tmp%%{F-}"
    done <<< "$(acpi -b)"

    echo "$delim$bat"
}

_uptime() {
    f_color="c98a1e"

    echo "%{F#$f_color} $(uptime | awk '{print $3}' | cut -d',' -f 1)%{F-}"
}

_desktops() {
    f_color="ffffff"    # Foreground color for active desktop
    b_color="c25704"    # Background color for active desktop

    # Change to given desktop with left mouse click
    click_command="bspc desktop -f '&' \& melonbar"

    # Change to last used desktop with left mouse click
    # on active (highlighted) desktop
    active_click_command="bspc desktop -f last.local \& melonbar"

    # Get the current active desktop
    current=$(bspc query -D -d --names)

    # Format the current active desktop with correct colors
    # and click command
    color_current="%{F#$f_color}%{B#$b_color}%{A:$active_click_command:} $current %{A}%{F-}%{B-}"

    # Get a list of all desktops and format them with click commands.
    # Replace the active dektop with color_current.
    desktops=$(bspc query -D -m --names | sed "s/^.*$/%{A:$click_command:}&%{A}/g;s/^%{A:.* '$current' .*:}$current%{A}$/$color_current/g")

    # Uncomment to show desktops without clickable areas.
    # desktops=$(bspc query -D --names | sed "s/^$current$/$color_current/g")

    # Print of the formated desktop list and reset all colors.
    echo "$desktops%{F-}%{B-}"
}

_window(){
    f_color="-"
    b_color="-"
    window_name="$(xdotool getwindowfocus getwindowname)"
    echo "%{B$b_color}%{F$f_color}$window_name%{F-}%{B-}"
}

_window_count(){
    f_color="#ff6600"
    b_color="-"
    icon=""
    window_count=" $(bspc query -N -n .window.local | wc -l )"
    [ "$window_count" == " 0" ] && window_count="" && icon=""
    echo "%{B$b_color}%{F$f_color}$icon$window_count%{F-}%{B-}"
}

_time() {
    f_color="61AEEE"
    echo "%{F#$f_color} $(date '+%H:%M')%{F-}"
}

_date() {
    f_color="F79494"
    echo "%{F#$f_color} $(date '+%a %d %B')%{F-}"
}

status() {
    echo "%{l}"
    _desktops
    
    echo " "
    _window

    echo "%{r}"
    _keystate

	# record

    _window_count
    echo "$delim"

    _uptime
    echo "$delim"

    _memory 
    echo "$delim"
    
	_volume
	echo "$delim"

    _date
    echo "$delim"

    _time

    _battery

    # update
}

# Remove all newline chars and print status.
# Lemonbar requires a newline char at the end of the statusline.
status | tr '\n' ' ' && echo
