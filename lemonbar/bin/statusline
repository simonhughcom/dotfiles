#!/bin/bash

prefix=${XDG_RUNTIME_DIR}/melonbar/statusline

mkdir -p "$prefix"

delim="%{F#b0b0b0}|%{F-}"

alert_color="#ff2222"

_keystate() {
    f_color=$alert_color

    lockline=$(xset -q | grep "Num Lock")

    caplock=$(echo "$lockline" | awk '{print $4}')
    numlock=$(echo "$lockline" | awk '{print $8}')
    scrolllock=$(echo "$lockline" | awk '{print $12}')

    message=""

    [ "$caplock" = "on" ] && message="%{F$f_color}CAPLOCK $delim"
    [ "$numlock" = "on" ] && message="$message %{F$f_color}NUMLOCK $delim"
    [ "$scrolllock" = "on" ] && message="$message %{F$f_color}SCROLLLOCK $delim"

    echo "$message%{F-}" > $prefix/keystate
}

_update() {
    f_color="b29f27"
    icon="üì¶"

    updatenr=$(pacman -Qu | grep -v "\[ignored\]" | wc -l)
    [ "$updatenr" != "0" ] && printf "$delim %{F#$f_color} $icon $updatenr%{F-}"
}

_record() {
    f_color=$alert_color
    icon="ÔÑë"

	recpid_file="$XDG_RUNTIME_DIR/recordingpid"

    if [ "$1" = "Start Recording" ]; then
        echo "%{F$f_color}$icon %{F-}$delim" > $prefix/record
    else
        echo "" > $prefix/record
    fi
}

_battery() {
    # Don't run if acpi not available
    command -v acpi > /dev/null 2>&1 || return
    f_color="#70bb70"

    bat=""
    while read line; do
        tmp="$(echo "$line" | awk '{print $4}' | sed 's/,//;s/%//')"
        
        if [ "$tmp" -gt "75" ]; then
            icon="ÔâÄ"
        elif [ "$tmp" -gt "50" ]; then
            icon="ÔâÅ"
        elif [ "$tmp" -gt "20" ]; then
            icon="ÔâÇ"
            f_color="#999900"
        elif [ "$tmp" -lt "5" ]; then
            icon="ÔâÑ"
            f_color="#aa2222"
        else
            icon="ÔâÉ"
            f_color="#aa2222"
        fi

        bat="$bat %{F$f_color}$icon $tmp%%{F-}"
    done <<< "$(acpi -b)"

    echo "$delim$bat" > $prefix/battery
}



_window_title(){
    f_color="-"
    b_color="-"
    window_name="$(xdotool getwindowfocus getwindowname)"
    echo "%{B$b_color}%{F$f_color}$window_name%{F-}%{B-}" > $prefix/window
}

_window_count(){
    f_color="-"
    b_color="-"
    icon="Ôãê"
    click_command="bspc node -c"

    window_count=" $(bspc query -N -n .window.local | wc -l )"
    [ "$window_count" == " 0" ] && window_count="" && icon="ÔÅû"
    echo "%{B$b_color}%{F$f_color}%{A1:$click_command:}$icon$window_count%{A}%{F-}%{B-}" > $prefix/window_count
}

_uptime() {
    f_color="#ff55bb"
    b_color="-"
    icon="ÔÑπ" 
    click_command="melonbar-click uptime"

    echo "%{F$f_color}%{B$b_color}%{A:$click_command:}$icon $(uptime | awk '{print $3}' | cut -d',' -f 1)%{A}%{B-}%{F-}" > $prefix/uptime
}

_memory() {
    f_color="#eeee00"
    b_color="-"
    icon="ÔÇÄ"
    click_command="melonbar-click memory"

    echo "%{F$f_color}%{B$b_color}%{A:$click_command:}$icon $(free -h | awk '/Mem:/ {print $3}')%{A}%{B-}%{F-}" > $prefix/memory
}

_volume() {
    f_color="#10e070"
    b_color="-"

	vol="$1"

	if [ "$vol" == "mute" ]; then
        printf "%%{F$alert_color}ÔÅû %%{F-}" > $prefix/volume && return 0
    elif [ "$vol" -gt "100" ]; then
		icon="ÔÄ®"
	elif [ "$vol" -lt "50" ]; then
		icon="ÔÄ¶"
	else
		icon="ÔÄß"
	fi

	printf "%%{F$f_color}%%{B$b_color}%s %s%%\n%%{B-}%%{F-}" "$icon" "$vol" > $prefix/volume
}

_date() {
    f_color="#ff00ff"
    b_color="-"
    icon="ÔÅ≥"
    click_command="melonbar-click date"

    echo "%{F$f_color}%{B$b_color}%{A:$click_command:}$icon $(date '+%a %d %B')%{A}%{B-}%{F-}" > $prefix/date
}

_time() {
    f_color="#10d0ff"
    b_color="-"
    icon="ÔÄó"
    click_command="melonbar-click time"

    echo "%{F$f_color}%{B$b_color}%{A:$click_command:}$icon $(date '+%H:%M')%{A}%{B-}%{F-}" > $prefix/time
}

_desktops() {
    f_color="#bb00ff"    # Foreground color
    b_color="-"    # Background color
    f_active_color="#ffffff"    # Foreground color for active desktop
    b_active_color="#9000ff"    # Background color for active desktop
    # b_active_color="#c25704"    # Background color for active desktop

    # Change to given desktop with left mouse click
    click_command="bspc desktop -f '&'"

    # Change to last used desktop with left mouse click
    # on active (highlighted) desktop
    active_click_command="bspc desktop -f last.local"

    other_prefix="%{F$f_color}%{B$b_color}%{A:$click_command:}"
    current_prefix="%{F$f_active_color}%{B$b_active_color}%{A:$active_click_command:}"
    postfix="%{A}%{B-}%{F-}"

    # Get bspc report (see 'man bspc' and search for 'report').
    # Separate items into lines and filter for current monitor
    current_monitor="$( echo "$1" | tr ':' '\n' | sed -n "s/W//;/^M.*$/,/^m.*$/p" )"

    # Format report for statusline.
    echo "$current_monitor" | sed "/^[^o|^O|^F]/d; s/^o//; s/^[^O|^F].*$/$other_prefix&/; s/^[O|F].*/& $postfix/; s/^[O|F]/$current_prefix /" > $prefix/desktops
}


_status() {
    echo "%{l}"
    cat $prefix/desktops 2> /dev/null
    
    echo " "
    cat $prefix/window 2> /dev/null

    echo "%{r}"
    cat $prefix/keystate 2> /dev/null

    cat $prefix/record 2> /dev/null

    cat $prefix/window_count 2> /dev/null
    echo "$delim"

    cat $prefix/uptime 2> /dev/null
    echo "$delim"

    cat $prefix/memory  2> /dev/null
    echo "$delim"
    
	cat $prefix/volume 2> /dev/null
	echo "$delim"

    cat $prefix/date 2> /dev/null
    echo "$delim"

    cat $prefix/time 2> /dev/null

    cat $prefix/battery 2> /dev/null

    # update
}

# _update_window_manager() {
#     _window &
#     _window_count &
#     _desktops &
# }

# Update system info modules
# these should be run on a loop.
_update_system(){
    _battery &
    _time &
    _date &
    _memory &
    _uptime
}

# Update everything apart from WM modules
# they a special case.
_update_all(){
    # _update_window_manager &
    _update_system &
    _keystate &
    _record
}

_update(){
    case "$1" in
        battery) _battery ;;
        time) _time ;;
        date) _date ;;
        volume) _volume "$2" ;;
        memory) _memory ;;
        uptime) _uptime ;;
        window-count) _window_count ;;
        window-title) _window_title ;;
        desktops) _desktops "$2";;
        keystate) _keystate ;;
        system) _update_system ;;
        record) _record "$2" ;;
        all) _update_all ;;
        *) _update_all ;;
    esac
}

_run(){
    case "$1" in
        desktops) _run_desktops ;;
        window_title) _run_window_title ;;
        *) _run_desktops & _run_window_title ;;
    esac
}



case "$1" in
    -u|update) shift; _update "$@" ;;
    -r|run) shift; _run $@ ;;
    *)  # Remove all newline chars and print status.
        # Lemonbar requires a newline char at the end of the statusline.
        _status | tr '\n' ' ' && echo ;;
esac
