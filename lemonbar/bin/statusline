#!/bin/bash

prefix=${XDG_RUNTIME_DIR}/melonbar/statusline

mkdir -p "$prefix"

delim="%{F#b0b0b0}|%{F-}"

_keystate() {
    f_color="e82e1e"

    lockline=$(xset -q | grep "Num Lock")

    caplock=$(echo "$lockline" | awk '{print $4}')
    numlock=$(echo "$lockline" | awk '{print $8}')
    scrolllock=$(echo "$lockline" | awk '{print $12}')

    message=""

    [ "$caplock" = "on" ] && message="%{F#$f_color}CAPLOCK $delim"
    [ "$numlock" = "on" ] && message="$message %{F#$f_color}NUMLOCK $delim"
    [ "$scrolllock" = "on" ] && message="$message %{F#$f_color}SCROLLLOCK $delim"

    echo "$message%{F-}" > $prefix/keystate
}

_memory() {
    f_color="C0C000"
    icon="ÔÇÄ"
    click_command="melonbar-click memory"

    echo "%{F#$f_color}%{A:$click_command:}$icon $(free -h | awk '/Mem:/ {print $3}')%{A}%{F-}" > $prefix/memory
}

_volume() {
    f_color="98C379"

	vol=$( volume get-status )

	if [ "$vol" == "mute" ]; then
        printf "ÔÅû\\n" > $prefix/volume && return 0
    elif [ "$vol" -gt "100" ]; then
		icon="ÔÄ®"
	elif [ "$vol" -lt "50" ]; then
		icon="ÔÄ¶"
	else
		icon="ÔÄß"
	fi

	printf "%%{F#$f_color}%s %s%%\n%%{F-}" "$icon" "$vol" > $prefix/volume
}

_update() {
    f_color="b29f27"
    icon="üì¶"

    updatenr=$(pacman -Qu | grep -v "\[ignored\]" | wc -l)
    [ "$updatenr" != "0" ] && printf "$delim %{F#$f_color} $icon $updatenr%{F-}"
}

_record() {
    f_color="e82e1e"
    icon="‚è∫"

	recpid_file="$XDG_RUNTIME_DIR/recordingpid"
	[ -e "$recpid_file" ] && echo "%{F#$f_color}$icon rec $delim%{F-}"
}

_battery() {
    # Don't run if acpi not available
    command -v acpi > /dev/null 2>&1 || return
    f_color="#70bb70"

    bat=""
    while read line; do
        tmp="$(echo "$line" | awk '{print $4}' | sed 's/,//;s/%//')"
        
        if [ "$tmp" -gt "75" ]; then
            icon="ÔâÄ"
        elif [ "$tmp" -gt "50" ]; then
            icon="ÔâÅ"
        elif [ "$tmp" -gt "20" ]; then
            icon="ÔâÇ"
            f_color="#999900"
        elif [ "$tmp" -lt "5" ]; then
            icon="ÔâÑ"
            f_color="#aa2222"
        else
            icon="ÔâÉ"
            f_color="#aa2222"
        fi

        bat="$bat %{F$f_color}$icon $tmp%%{F-}"
    done <<< "$(acpi -b)"

    echo "$delim$bat" > $prefix/battery
}

_uptime() {
    f_color="c98a1e"
    icon="ÔÑπ" 
    click_command="melonbar-click uptime"

    echo "%{F#$f_color}%{A:$click_command:}$icon $(uptime | awk '{print $3}' | cut -d',' -f 1)%{A}%{F-}" > $prefix/uptime
}


_window_title(){
    f_color="-"
    b_color="-"
    window_name="$(xdotool getwindowfocus getwindowname)"
    echo "%{B$b_color}%{F$f_color}$window_name%{F-}%{B-}" > $prefix/window
}

_window_count(){
    f_color="#ff6600"
    b_color="-"
    icon="Ôãê"

    window_count=" $(bspc query -N -n .window.local | wc -l )"
    [ "$window_count" == " 0" ] && window_count="" && icon="ÔÅû"
    echo "%{B$b_color}%{F$f_color}$icon$window_count%{F-}%{B-}" > $prefix/window_count
}

_time() {
    f_color="61AEEE"
    icon="ÔÄó"
    click_command="melonbar-click time"

    echo "%{F#$f_color}%{A:$click_command:}$icon $(date '+%H:%M')%{A}%{F-}" > $prefix/time
}

_date() {
    f_color="F79494"
    icon="ÔÅ≥"
    click_command="melonbar-click date"

    echo "%{F#$f_color}%{A:$click_command:}$icon $(date '+%a %d %B')%{A}%{F-}" > $prefix/date
}


_run_desktops() {
    f_color="ffffff"    # Foreground color for active desktop
    b_color="c25704"    # Background color for active desktop

    # Change to given desktop with left mouse click
    click_command="bspc desktop -f '&' \& melonbar"

    # Change to last used desktop with left mouse click
    # on active (highlighted) desktop
    active_click_command="bspc desktop -f last.local \& melonbar"

    current_prefix="%{F#$f_color}%{B#$b_color}%{A:$active_click_command:}"
    current_postfix="%{A}%{F-}%{B-}"
    other_prefix="%{A:$click_command:}"
    postfix="%{A}"

    bspc subscribe report | while read -r line; do
        # gets bspcs report and formats it for the statusline.
        # see 'man bspc' and search for 'report'.
        echo "$line" | tr ':' '\n' | sed "/^[^o|^O|^F]/d;s/^o//g;s/^[^O|^F].*/$other_prefix&$postfix/g;s/^[O|F]/$current_prefix /g;s/^$current_prefix.*$/& $current_postfix/g" | tr '\n' ' ' > $prefix/desktops

        # update window_title
        # _window_title
        # update window count
        # _window_count
    done
}

_run_window_title() {
    bspc subscribe node_focus | while read -r line; do
        # _window_title
        echo "lol"
    done
}


status() {
    echo "%{l}"
    cat $prefix/desktops 2> /dev/null
    
    echo " "
    cat $prefix/window 2> /dev/null

    echo "%{r}"
    cat $prefix/keystate 2> /dev/null

	# record

    cat $prefix/window_count 2> /dev/null
    echo "$delim"

    cat $prefix/uptime 2> /dev/null
    echo "$delim"

    cat $prefix/memory  2> /dev/null
    echo "$delim"
    
	cat $prefix/volume 2> /dev/null
	echo "$delim"

    cat $prefix/date 2> /dev/null
    echo "$delim"

    cat $prefix/time 2> /dev/null

    cat $prefix/battery 2> /dev/null

    # update
}

# _update_window_manager() {
#     _window &
#     _window_count &
#     _desktops &
# }

_update_system(){
    _battery &
    _time &
    _date &
    _memory &
    _uptime
}


_update_all(){
    # _update_window_manager &
    _update_system &
    _volume
}

_update(){
    case "$1" in
        battery) _battery ;;
        time) _time ;;
        date) _date ;;
        volume) _volume ;;
        memory) _memory ;;
        uptime) _uptime ;;
        window-count) _window_count ;;
        # window) _window ;;
        desktops) _run_desktops ;;
        keystate) _keystate ;;
        # shortcuts
        window_manager) _update_window_manager ;;
        system) _update_system ;;
        all) _update_all ;;
        *) _update_all ;;
    esac
}

_run(){
    case "$1" in
        desktops) _run_desktops ;;
        window_title) _run_window_title ;;
        *) _run_desktops & _run_window_title ;;
    esac
}



case "$1" in
    -u|update) shift; _update $@ ;;
    -r|run) shift; _run $@ ;;
    *)  # Remove all newline chars and print status.
        # Lemonbar requires a newline char at the end of the statusline.
        status | tr '\n' ' ' && echo ;;
esac
