#!/bin/sh

# BOOK
# Simon Hugh Moore
#
# Store and search for bookmarks

bookmark_dir=~/Documents/notes/bookmarks
cd $bookmark_dir

__usage="usage: $(basename "$0") [OPTIONS]"
__help="$__usage

Store and search for bookmarks

Options:
  -a, --add <uri> [file] [tag]       Add bookmark
  -e, --edit [OPTIONS]               Open bookmark file in EDITOR
  -o, --open [OPTIONS]               Use FZF to open bookmark in BROWSER
  -l, --list [OPTIONS]               List bookmarks, files, tags
  -m, --menu [OPTIONS]               Find bookmarks using FZF
  -mm, --mmenu [OPTIONS]             Same as menu but pass result back into FZF
  -s, --search <term>                Search for bookmarks
  -g, --get <term>                   Get bookmarks based on file and/or tags 
  --grep <term>                      Grep files recursively in bookmark directory
  -h, --help                         Print this help message
"

_error(){ printf "%s\nerror: %s\n" "$__usage" "$1"; exit 1; }

_get_html_title(){
    curl --silent --fail "$1" | awk -vRS="</title>" '/<title.*>/{gsub(/.*<title.*>|\n+/,"");print;exit}' | recode -q html..utf8
}

_format_tag(){ sed 's/.*/\L&/;s/^./\u&/;s/[[:space:]]./\U&/g;s/[[:space:]][[:space:]]*/ /g;s/.*/## &/'; }

_add(){
    [ -z "$1" ] && _error "argument -a/--add: expected at least one argument"
    url="$1"
    file="${2:-misc}.md"
    tag="$( echo "${3:-Misc}" | _format_tag )"
    title="$( _get_html_title "$url" )"
    [ "$title" = "" ] && title="$url"

    # Make tag if it does not exist
    grep -c "^$tag$" "$file" || echo "\n## $tag" >> "$file"

    # Add bookmark after tag
    sed "/^$tag$/a - [$title]($url)" "$file" > "$file.tmp"
    mv "$file.tmp" "$file"
}

_edit(){
    if [ -z "$1" ]; then
        $EDITOR "$( _list_files | fzf ).md"
    else
        $EDITOR "${1}.md"
    fi
}

_open(){
    choice="$( _menu $@ )"
    if [ $( echo "$choice" | wc -l ) -gt 1 ] && [ "$1" != "all" ] && [ ! -z "$1" ]; then
        choice="$( echo "$choice" | fzf -m --sync )"
    fi
    echo "$choice" | awk -F'[()]' '{print $(NF-1)}' | xargs -I {} sh -c "$BROWSER {}; sleep 0.1"
}

_list_files(){
    find . -type f -name "*.md" -printf "%P\n" | sed 's/\.md$//'
}

_list_bookmarks(){
    grep -hr --include="*.md" "^-[[:space:]]\[.*\](.*)" | sed 's/^-[[:space:]]*//'
}

_list_tags(){
    grep -r --include="*.md" "^##.*$" | sed 's|\.md:##[[:space:]]*| #|g'
}

_list(){
    case "$1" in
        all) _list_bookmarks ;;
        file) _list_files ;;
        tag) _list_tags ;;
        *) _list_bookmarks ;;
    esac
}

_get_bm(){ grep '^-[[:space:]]*\[.*\](.*)$' | sed 's/^-[[:space:]]*//'; }

_bm_from_tag(){ sed -n "/^${1}$/,/##.*$/{/^-[[:space:]]/p}" | sed 's/-[[:space:]]*//'; }

_tag_menu(){
    choice="$( _list_tags | fzf --exact )"
    file="$(  echo "$choice" | awk '{print $1}' )"
    tag="$(  echo "$choice" | awk -F '#' '{print $2}' | _format_tag )"
    cat "${file}.md" | _bm_from_tag "$tag"
}

_file_menu(){
    file="$( _list_files | fzf --exact )"
    cat "${file}.md" | _get_bm
}

_add_menu_fzf(){
    fzf --exact --prompt "$1" --bind="enter:replace-query+print-query,ctrl-space:print-query"
}

_add_menu(){
    tag="$( _list_tags | awk '{print $2}' | sort | uniq | _add_menu_fzf "Tag: " )"
    file="$( _list_files | sort | _add_menu_fzf "File: " )"
    uri="$( xclip -o 2> /dev/null | _add_menu_fzf "URI: " )"
}

_menu(){
    case "$1" in
        all) _list_bookmarks | fzf --exact -m ;;
        add) _add_menu ;;
        tag) _tag_menu ;;
        file) _file_menu ;;
        *) _list_bookmarks | fzf --exact -m ;;
    esac
}

_grep(){ grep -hr -i --color=auto "$@"; }

_search(){
    grep -hr "^- \[.*\]\(.*\)$" | grep -i --color=auto -E "$@"
}

_get(){
    for arg in "$@"; do
        file="${arg%%#*}"
        tags="${arg##*#}"

        # make sure tags is empty if no tags given
        [ -z "${arg##*#*}" ] || tags=""

        # For every file search for every tag
        find . -type f | grep "$file" | while read file; do
            if [ -z "$tags" ]; then
                cat "$file" | grep '^-[[:space:]]' | sed 's/-[[:space:]]*//'
            else
                echo "$tags" | tr '#' '\n' | while read tag; do
                cat "$file" | _bm_from_tag "$( echo "$tag" | _format_tag )"
                done
            fi
        done
    done
}

_main(){
   _files 
}


while test $# -gt 0; do
    case "$1" in
        -h|--help) echo "$__help"; exit ;;
        -a|--add) shift; _add $@; exit ;;
        -e|--edit) shift; _edit $@; exit ;;
        -o|--open) shift; _open $@; exit ;;
        -l|--list) shift; _list $@; exit ;;
        -m|--menu) shift; _menu $@; exit ;;
        -mm|--mmenu) shift; _menu $@ | fzf --sync; exit ;;
        -g|--get) shift; _get $@; exit ;;
        --grep) shift; _grep $@; exit ;;
        -s|--search) shift; _search $@; exit ;;
    esac
    shift
done
