#!/bin/sh

# BOOK
# Simon Hugh Moore
#
# Store and search for bookmarks

bookmark_dir=~/Documents/notes/bookmarks
cd $bookmark_dir

__usage="usage: $(basename "$0") [OPTIONS]"
__help="$__usage

Store and search for bookmarks

Options:
  -a, --add [uri] [file] [tag]       Add bookmark
  -e, --edit [file]                  Open bookmark file in EDITOR
  -o, --open [OPTIONS]               Use FZF to open bookmark in BROWSER
  -l, --list [OPTIONS]               List bookmarks, files, tags
  -m, --menu [OPTIONS]               Find bookmarks using FZF
  -mm, --mmenu [OPTIONS]             Same as menu but pass result back into FZF
  -s, --search <term>                Search for bookmarks
  -q, --query <expression            Get bookmarks filtered by query
  -g, --grep <term>                  Grep files recursively in bookmark directory
  -h, --help                         Print this help message
"


# Helper Functions

_error(){ printf "%s\nerror: %s\n" "$__usage" "$1"; exit 1; }

_get_html_title(){
    curl --silent --fail "$1" | awk -vRS="</title>" '/<title.*>/{gsub(/.*<title.*>|\n+/,"");print;exit}' | recode -q html..utf8
}

_format_tag(){ sed 's/[^#].*$/\u&/;s/##*/& /;s/^[^#]/# &/'; }

_list_files(){
    case "$1" in
        ^*) file="^./${1#^}" ;;
        *) file="/${1}" ;;
    esac
    find . -not -path '*/\.*' -name "*.md" -type f -printf "%p\n" | grep "${file}" | sed 's|^\./||;s|\.md$||'
}

_get_file_content(){
    _list_files "${1}" | tr '\n' '\0' | xargs -0 -I{} cat "./{}.md"
}
_get_tag_content(){
    tag="$( echo "$1" | _format_tag )"
    count="#${tag%# *}"
    sed -nE "/^${tag}$/,/^#{1,${#count}}[[:space:]].*$/{/^.*\[.*\]\(.*\).*$/p}"
}

# get bookmarks from stream
_get_bm(){ grep -o '\[.*\]\(.*\)' ; }

# get bookmarks associated with tag
_bm_from_tag(){ 
    _get_tag_content "${1}" | _get_bm
}
_add(){
    [ -z "$1" ] && _error "add: expected at least one argument"
    url="$1"
    file="${2:-misc}"
    tag="$( echo "${3:-Misc}" | _format_tag )"
    title="$( _get_html_title "$url" )"
    [ "$title" = "" ] && title="$url"

    # create file if it does not exist
    _add_file "$file"

    # Make tag if it does not exist
    grep -c "^$tag$" "$file" || echo "\n$tag" >> "$file"

    # Add bookmark after tag
    sed "/^$tag$/a - [$title]($url)" "$file" > "$file.tmp"
    mv "$file.tmp" "$file"
}

_add_file(){
    [ -z "$1" ] && _error "add file: expected at least one argument"

    # if dir ends with '/', use 'misc' as file
    file="$( echo "$1" | sed 's|/$|/misc|' ).md"
    
    # if file does not exist, create it with formatted heading
    if [ ! -f "$file" ]; then
        dir="${file%/*}"
        mkdir -p "$dir"
        echo "${file##*/}" | sed 's/\.md$//;s/^./# \u&/' > "$file"
    fi
    exit
}

_edit(){
    [ -z "$1" ] && _error "edit: expected at least one argument"
    $EDITOR "${1}.md"
}

_edit_menu(){
    _edit "$( _list_files | fzf )"
}

_open_menu(){
    choice="$( _menu $@ )"
    if [ $( echo "$choice" | wc -l ) -gt 1 ] && [ "$1" != "all" ] && [ ! -z "$1" ]; then
        choice="$( echo "$choice" | fzf -m --sync )"
    fi
    echo "$choice" | awk -F'[()]' '{print $(NF-1)}' | xargs -I {} sh -c "$BROWSER {}; sleep 0.1"
}

_list_files(){
    find . -not -path '*/\.*' -name "*.md" -type f -printf "%P\n" | grep ".*/${file}" | sed 's/\.md$//'
}

_list_bookmarks(){
    grep -hr --include="*.md" "^-[[:space:]]\[.*\](.*)" | sed 's/^-[[:space:]]*//'
}

_list_tags(){
    grep -r --include="*.md" "^#.*$" | sed 's|\.md:| |;s/#[[:space:]][[:space:]]*/#/'
}

_get_bm(){ grep '^-[[:space:]]*\[.*\](.*)$' | sed 's/^-[[:space:]]*//'; }

_bm_from_tag(){ 
    tag="$( echo "$1" | _format_tag )"
    count="#${tag%# *}"
    sed -nE "/^${tag}$/,/^#{1,${#count}}[[:space:]].*$/{/^.*\[.*\]\(.*\).*$/p}" | grep -o '\[.*\]\(.*\)'
}

_tag_menu(){
    choice="$( _list_tags | fzf --exact )"
    file="$(  echo "$choice" | awk '{print $1}' )"
    tag="$(  echo "$choice" | awk '{print $2}' )"
    cat "${file}.md" | _bm_from_tag "$tag"
}

_file_menu(){
    file="$( _list_files | fzf --exact )"
    cat "${file}.md" | _get_bm
}

_add_menu_fzf(){
    fzf --exact --prompt "$1" --bind="enter:replace-query+print-query,ctrl-space:print-query"
}

_add_menu(){
    tag="$( _list_tags | awk -F ' #' '{print $2}' | sort | uniq | _add_menu_fzf "Tag: " )"
    file="$( _list_files | sort | _add_menu_fzf "File: " )"
    uri="$( xclip -o 2> /dev/null | _add_menu_fzf "URI: " )"

    _add "$uri" "$file" "$tag"
}

_menu(){
    case "$1" in
        all) _list_bookmarks | fzf --exact -m ;;
        tag) _tag_menu ;;
        file) _file_menu ;;
        *) _list_bookmarks | fzf --exact -m ;;
    esac
}

_grep(){ grep -hr -i --color=auto "$@"; }

_search(){
    grep -hr "^- \[.*\]\(.*\)$" | grep -i --color=auto -E "$@"
}

_query(){
    for arg in "$@"; do
        file="$( echo "$arg" | sed 's/\!*##*.*$//' )"
        tags="${arg#$file}"

        # make sure tags is empty if no tags given
        [ -z "${arg##*#*}" ] || tags=""

        # Get contents of files
        file="$( _list_files | grep ".*/${file}" | xargs -I{} cat "./{}.md" )"

        # Get all bookmarks from files
        bookmarks="$( echo "$file" | grep '^-[[:space:]]' | sed 's/-[[:space:]]*//' )"
        
        # For each tag get bookmarks and filter
        (
        IFS='
        '
        for tag in $( echo "$tags" | sed 's/+*\!*##*/\n&/g' ); do
            bm="$( echo "$file" | _bm_from_tag "$( echo "$tag" | sed 's/^+!//;s/^!//;s/^+//' )" )"
            case "$tag" in
                +!*) bookmarks="$bookmarks\n$(  echo "$file" | grep '^-[[:space:]]' | sed 's/-[[:space:]]*//' | grep -v -F -- "$bm" )" ;;
                +*) bookmarks="$bookmarks\n$bm" ;;
                !*) bookmarks="$( echo "$bookmarks" | grep -v -F -- "$bm" )" ;;
                *) bookmarks="$( echo "$bookmarks" | grep -x -F -- "$bm" )" ;;
            esac
        done
        [ -z "$bookmarks" ] || echo "$bookmarks" | sed '/^[[:space:]]*$/d'
        )
    done
}


_cli_add(){
    if [ -z "$1" ]; then
        _add_menu
    else
        _add "$@"
    fi
}

_cli_edit(){
    if [ -z "$1" ]; then
        _edit_menu
    else
        _edit "$@"
    fi
}


_cli_open(){
    _open_menu "$@"
}

_cli_list(){
    case "$1" in
        all) _list_bookmarks ;;
        file) _list_files ;;
        tag) _list_tags ;;
        *) _list_bookmarks ;;
    esac
}

_cli_menu(){
    _menu "$@"
}

_cli_mmenu(){
    _menu "$@" | fzf --sync
}

_cli_query(){
    _query "$@" | sort -u
}

_cli_search(){
    _search "$@"
}

_cli_grep(){
    _grep "$@"
}

[ -z "$1" ] && echo "$__usage"
while test $# -gt 0; do
    case "$1" in
        -h|--help) echo "$__help"; exit ;;
        -a|--add) shift; _cli_add $@; exit ;;
        -e|--edit) shift; _cli_edit $@; exit ;;
        -o|--open) shift; _cli_open $@; exit ;;
        -l|--list) shift; _cli_list $@; exit ;;
        -m|--menu) shift; _cli_menu $@; exit ;;
        -mm|--mmenu) shift; _cli_mmenu $@; exit ;;
        -q|--query) shift; _cli_query "$@"; exit ;;
        -g|--grep) shift; _cli_grep $@; exit ;;
        -s|--search) shift; _cli_search $@; exit ;;
        *) _query "$@"; exit ;;
    esac
    shift
done
